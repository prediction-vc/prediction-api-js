/**
 * Prediction Enterprise API
 * We are proud to introduce our 1.0.0 version of Prediction Enterprise API.  It is our first step to sharing our data with the world and being more transparent about our predictions, their accuracy and our fund trades and performance.  In the case you are missing some data please drop us a line at enterprise@prediction.vc. We will be happy to answer your questions and implement new features for you.  [Platform FAQ](https://predictionvc.freshdesk.com/support/solutions/) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FundTrades'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FundTrades'));
  } else {
    // Browser globals (root is window)
    if (!root.PredictionEnterpriseApi) {
      root.PredictionEnterpriseApi = {};
    }
    root.PredictionEnterpriseApi.FundApi = factory(root.PredictionEnterpriseApi.ApiClient, root.PredictionEnterpriseApi.FundTrades);
  }
}(this, function(ApiClient, FundTrades) {
  'use strict';

  /**
   * Fund service.
   * @module api/FundApi
   * @version 1.0.0
   */

  /**
   * Constructs a new FundApi. 
   * @alias module:api/FundApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Prediction Fund trade data
     * Prediction Fund trade data
     * @param {Object} opts Optional parameters
     * @param {String} opts.entry entry date for trades, e.g 2018-09-01. (only for premium accounts)
     * @param {String} opts.exit exit date for trades, e.g 2018-09-01. (only for premium accounts)
     * @param {String} opts.direction short/long
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FundTrades} and HTTP response
     */
    this.fundTradesGetWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'entry': opts['entry'],
        'exit': opts['exit'],
        'direction': opts['direction'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FundTrades;

      return this.apiClient.callApi(
        '/fund/trades', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Prediction Fund trade data
     * Prediction Fund trade data
     * @param {Object} opts Optional parameters
     * @param {String} opts.entry entry date for trades, e.g 2018-09-01. (only for premium accounts)
     * @param {String} opts.exit exit date for trades, e.g 2018-09-01. (only for premium accounts)
     * @param {String} opts.direction short/long
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FundTrades}
     */
    this.fundTradesGet = function(opts) {
      return this.fundTradesGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Traded tokens
     * Traded tokens
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<'String'>} and HTTP response
     */
    this.fundTradesTokensGetWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/fund/trades/tokens', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Traded tokens
     * Traded tokens
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<'String'>}
     */
    this.fundTradesTokensGet = function() {
      return this.fundTradesTokensGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
