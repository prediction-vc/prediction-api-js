/**
 * Prediction Enterprise API
 * We are proud to introduce our 1.0.0 version of Prediction Enterprise API.  It is our first step to sharing our data with the world and being more transparent about our predictions, their accuracy and our fund trades and performance.  In the case you are missing some data please drop us a line at enterprise@prediction.vc. We will be happy to answer your questions and implement new features for you.  [Platform FAQ](https://predictionvc.freshdesk.com/support/solutions/) 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Datum', 'model/Datum11', 'model/Datum4', 'model/Datum6', 'model/Datum8', 'model/FundTrades', 'model/FundTradesTokens', 'model/Historical', 'model/Ohlc', 'model/Predictions', 'model/PredictionsAccuracy', 'model/PredictionsTokens', 'api/FundApi', 'api/HistoricalApi', 'api/OHLCApi', 'api/PredictionsApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Datum'), require('./model/Datum11'), require('./model/Datum4'), require('./model/Datum6'), require('./model/Datum8'), require('./model/FundTrades'), require('./model/FundTradesTokens'), require('./model/Historical'), require('./model/Ohlc'), require('./model/Predictions'), require('./model/PredictionsAccuracy'), require('./model/PredictionsTokens'), require('./api/FundApi'), require('./api/HistoricalApi'), require('./api/OHLCApi'), require('./api/PredictionsApi'));
  }
}(function(ApiClient, Datum, Datum11, Datum4, Datum6, Datum8, FundTrades, FundTradesTokens, Historical, Ohlc, Predictions, PredictionsAccuracy, PredictionsTokens, FundApi, HistoricalApi, OHLCApi, PredictionsApi) {
  'use strict';

  /**
   * We_are_proud_to_introduce_our_1_0_0_version_of_Prediction_Enterprise_API_It_is_our_first_step_to_sharing_our_data_with_the_world_and_being_more_transparent_about_our_predictions_their_accuracy_and_our_fund_trades_and_performance_In_the_case_you_are_missing_some_data_please_drop_us_a_line_at_enterpriseprediction_vc__We_will_be_happy_to_answer_your_questions_and_implement_new_features_for_you__Platform_FAQ_httpspredictionvc_freshdesk_comsupportsolutions.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var PredictionEnterpriseApi = require('index'); // See note below*.
   * var xxxSvc = new PredictionEnterpriseApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new PredictionEnterpriseApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new PredictionEnterpriseApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new PredictionEnterpriseApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Datum model constructor.
     * @property {module:model/Datum}
     */
    Datum: Datum,
    /**
     * The Datum11 model constructor.
     * @property {module:model/Datum11}
     */
    Datum11: Datum11,
    /**
     * The Datum4 model constructor.
     * @property {module:model/Datum4}
     */
    Datum4: Datum4,
    /**
     * The Datum6 model constructor.
     * @property {module:model/Datum6}
     */
    Datum6: Datum6,
    /**
     * The Datum8 model constructor.
     * @property {module:model/Datum8}
     */
    Datum8: Datum8,
    /**
     * The FundTrades model constructor.
     * @property {module:model/FundTrades}
     */
    FundTrades: FundTrades,
    /**
     * The FundTradesTokens model constructor.
     * @property {module:model/FundTradesTokens}
     */
    FundTradesTokens: FundTradesTokens,
    /**
     * The Historical model constructor.
     * @property {module:model/Historical}
     */
    Historical: Historical,
    /**
     * The Ohlc model constructor.
     * @property {module:model/Ohlc}
     */
    Ohlc: Ohlc,
    /**
     * The Predictions model constructor.
     * @property {module:model/Predictions}
     */
    Predictions: Predictions,
    /**
     * The PredictionsAccuracy model constructor.
     * @property {module:model/PredictionsAccuracy}
     */
    PredictionsAccuracy: PredictionsAccuracy,
    /**
     * The PredictionsTokens model constructor.
     * @property {module:model/PredictionsTokens}
     */
    PredictionsTokens: PredictionsTokens,
    /**
     * The FundApi service constructor.
     * @property {module:api/FundApi}
     */
    FundApi: FundApi,
    /**
     * The HistoricalApi service constructor.
     * @property {module:api/HistoricalApi}
     */
    HistoricalApi: HistoricalApi,
    /**
     * The OHLCApi service constructor.
     * @property {module:api/OHLCApi}
     */
    OHLCApi: OHLCApi,
    /**
     * The PredictionsApi service constructor.
     * @property {module:api/PredictionsApi}
     */
    PredictionsApi: PredictionsApi
  };

  return exports;
}));
